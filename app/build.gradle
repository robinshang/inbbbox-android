apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.autoscout24.gradle.todo'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.sonarqube'
apply from: '../buildsystem/sonarqube.gradle'
apply from: '../buildsystem/jacocoTasks.gradle'

ext {

    secrets = [
            // define your app secrets, for example:
            // hockeyAppId: keyProperty("HOCKEY_APP_ID")
    ]
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        applicationId "co.netguru.android.inbbbox"
        minSdkVersion 18
        targetSdkVersion 24
        versionCode isBitrise ? Integer.parseInt(bitrise.io.buildNumber) : 1
        versionName "0.1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            testCoverageEnabled true
            debuggable true
            minifyEnabled true
            shrinkResources false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro', 'proguard-rules-test.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            useProguard true
            proguardFiles 'proguard-rules.pro'
        }
    }

    productFlavors {
        mock {
            versionNameSuffix "-SNAPSHOT" // if plugin v. >= 2.2
            applicationIdSuffix ".mock"

            // put your secrets in the BuildConfig.java class, for example:
            // buildConfigField 'String', 'HOCKEY_APP_ID', "\"${secrets.hockeyAppId}\""
        }
        production {
            // inherit
        }
    }

    variantFilter { variant ->
        def buildName = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name
        // remove unnecessary variants
        ['release'].each {
            if (buildName.equals(it)) {
                ['mock'].each {
                    if (flavorName.equals(it)) {
                        variant.setIgnore(true);
                    }
                }
            }
        }
    }

    applicationVariants.all { variant ->
        // remove unaligned apk files
        variant.assemble.doLast {
            variant.outputs.each { output ->
                println "aligned " + output.outputFile
                println "unaligned " + output.packageApplication.outputFile

                File unaligned = output.packageApplication.outputFile;
                File aligned = output.outputFile
                if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
                    println "deleting " + unaligned.getName()
                    unaligned.delete()
                }
            }
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    todo {
        // configure
    }

    junitJacoco {
        jacocoVersion = jacocoBuild
        excludes = ['android/databinding/**/*.class',
                    '**/android/databinding/*Binding.class',
                    '**/BR.*',
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/*_MembersInjector.class',
                    '**/Dagger*Component.class',
                    '**/Dagger*Component$Builder.class',
                    '**/*Module_*Factory.class',
                    '**/AutoValue_*.*',
                    '**/*JavascriptBridge.class',
                    '**/Lambda$*.class',
                    '**/Lambda.class',
                    '**/*Lambda.class',
                    '**/*Lambda*.class']
    }

    lintOptions {
        abortOnError false
    }

}

// note: use only kapt for annotation processing
// (see https://github.com/realm/realm-java/issues/2491)

configurations {
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

dependencies {
    compile "co.netguru.android:commons:0.1.0"
    testCompile "co.netguru.android:test-commons:0.1.0"
    androidTestCompile "co.netguru.android:test-commons:0.1.0"
    // put entries from dependencies.gradle, for example:

    // Support
    compile libs.appCompat
    compile libs.recyclerView
    // MVP
    compile(libs.mosby) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-annotations'
    }

    // Dagger
    compile libs.dagger
    apt proc.dagger
    provided proc.javaxAnnotation

    compile libs.rxJava
    compile(libs.rxAndroid) {
        exclude module: 'rxjava'
    }
    compile(libs.rxBinding) {
        exclude module: 'rxjava'
        exclude module: 'rxandroid'
        exclude module: 'support-annotations'
    }
    compile(libs.rxBindingAppCompat) {
        exclude module: 'appcompat-v7'
        exclude module: 'rxbinding'
    }
    compile(libs.rxLifeCycle) {
        exclude module: 'rxjava'
        exclude module: 'rxbinding'
        exclude module: 'support-annotations'
    }
    compile(libs.rxLifeCycleComponent) {
        exclude module: 'rxjava'
        exclude module: 'rxlifecycle'
        exclude module: 'appcompat-v7'
    }

    // OkHttp + Retrofit
    compile libs.okHttp
    compile libs.okHttpLoggingInterceptor
    compile libs.retrofit
    compile libs.retrofitGsonConverter
    compile libs.retrofitRxJavaAdapter

    //persistent
    compile libs.kryo
    compile libs.snappyDb

    // View
    compile libs.butterKnife
    apt proc.butterKnife

    // Auto
    provided proc.autoValue
    apt proc.autoGson
    apt proc.autoParcel

    apt proc.retrolambda

    // Stetho
    compile libs.stetho

    // LeakCanary
    compile libs.leakCanary

    // BlockCanary
    compile libs.blockCanary

    // StrictMode
    compile libs.strictmodeNotifier

    // Unit testing
    testCompile(test.junit) {
        exclude module: 'hamcrest-core'
    }
    testCompile test.hamcrest
    testCompile test.mockito

    androidTestCompile test.hamcrest
    androidTestCompile libs.annotations
    androidTestCompile(test.androidJUnitRunner) {
        exclude module: 'support-annotations'
    }
    androidTestCompile(test.androidJUnit4Rules) {
        exclude module: 'support-annotations'
        exclude module: 'hamcrest-core'
    }
    androidTestCompile(test.espresso) {
        exclude module: 'hamcrest-library'
        exclude module: 'rules'
        exclude module: 'runner'
        exclude module: 'javax.annotation-api'
        exclude module: 'support-annotations'
    }
    androidTestCompile(test.espressoContrib) {
        exclude module: 'espresso-core'
        exclude module: 'hamcrest-core'
        exclude module: 'support-v4'
        exclude module: 'appcompat-v7'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
        exclude module: 'design'
    }
    androidTestCompile(test.espressoIntents) {
        exclude module: 'espresso-core'
        exclude module: 'support-annotations'
    }
    androidTestCompile(test.espressoIdlingResource) {
        exclude module: 'espresso-core'
    }

}