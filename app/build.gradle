apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'com.autoscout24.gradle.todo'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.sonarqube'
apply plugin: 'org.greenrobot.greendao'
apply from: '../buildsystem/sonarqube.gradle'
apply from: '../buildsystem/jacocoTasks.gradle'

ext {
    secrets = [
            hockeyAppIdProd      : keyProperty("HockeyAppAppIdProd"),
            dribbbleClientKey    : keyProperty("DribbbleClientKey"),
            dribbbleClientSecret : keyProperty("DribbbleClientSecret"),
            dribbbleOauthRedirect: keyProperty("DribbbleOauthRedirect"),
            dribbbleClientToken  : keyProperty("DribbbleClientToken"),
    ]
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "co.netguru.android.inbbbox"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode isBitrise ? Integer.parseInt(bitrise.io.buildNumber) : 1
        versionName "1.0.0"

        buildConfigField 'String', 'DRIBBBLE_CLIENT_KEY', '"' + secrets.dribbbleClientKey + '"'
        buildConfigField 'String', 'DRIBBBLE_CLIENT_SECRET', '"' + secrets.dribbbleClientSecret + '"'
        buildConfigField 'String', 'DRIBBBLE_CLIENT_TOKEN', '"' + secrets.dribbbleClientToken + '"'
        buildConfigField 'String', 'DRIBBBLE_OAUTH_REDIRECT', '"' + secrets.dribbbleOauthRedirect + '"'
    }

    buildTypes {
        debug {
            versionNameSuffix "-DEBUG"
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled true
            shrinkResources false
            useProguard false
            setProguardFiles([getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro',
                              'proguard-rules-test.pro'])
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            useProguard true
            setProguardFiles([getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'])

            manifestPlaceholders = [HOCKEYAPP_APP_ID: secrets.hockeyAppIdProd]
        }
    }

    productFlavors {
        nointegrations {

        }
        production {

        }
    }

    variantFilter { variant ->
        def buildName = variant.buildType.name
        def flavorName = variant.getFlavors().get(0).name
        // remove unnecessary variants
        ['release'].each {
            if (buildName.equals(it)) {
                ['mock'].each {
                    if (flavorName.equals(it)) {
                        variant.setIgnore(true);
                    }
                }
            }
        }
    }

    applicationVariants.all { variant ->
        // remove unaligned apk files
        variant.assemble.doLast {
            variant.outputs.each { output ->
                println "aligned " + output.outputFile
                println "unaligned " + output.packageApplication.outputFile

                File unaligned = output.packageApplication.outputFile;
                File aligned = output.outputFile
                if (!unaligned.getName().equalsIgnoreCase(aligned.getName())) {
                    println "deleting " + unaligned.getName()
                    unaligned.delete()
                }
            }
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    todo {
        // configure
    }

    junitJacoco {
        jacocoVersion = jacocoBuild
        excludes = ['android/databinding/**/*.class',
                    '**/android/databinding/*Binding.class',
                    '**/BR.*',
                    '**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*$ViewInjector*.*',
                    '**/*$ViewBinder*.*',
                    '**/*_MembersInjector.class',
                    '**/Dagger*Component.class',
                    '**/Dagger*Component$Builder.class',
                    '**/*Module_*Factory.class',
                    '**/AutoValue_*.*',
                    '**/*JavascriptBridge.class',
                    '**/Lambda$*.class',
                    '**/Lambda.class',
                    '**/*Lambda.class',
                    '**/*Lambda*.class']
    }

    lintOptions {
        abortOnError false
    }

}

// note: use only kapt for annotation processing
// (see https://github.com/realm/realm-java/issues/2491)

configurations {
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }
}

dependencies {
    compile('co.netguru.android:commons:0.1.0') {
        exclude group: 'io.reactivex'
    }
    testCompile('co.netguru.android:test-commons:0.1.0') {
        exclude group: 'io.reactivex'
    }
    // Support
    compile libs.appCompat
    compile libs.design
    compile libs.recyclerView
    // MVP
    compile(libs.mosby) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-annotations'
    }

    compile libs.mosbyViewState

    compile libs.cardView

    // Peek And Pop (3d Touch)
    compile libs.peekAndPop

    // Dagger
    compile libs.dagger
    apt proc.dagger
    provided proc.javaxAnnotation

    compile libs.rxJava
    compile(libs.rxAndroid) {
        exclude module: 'rxjava'
    }
    compile(libs.rxBinding) {
        exclude module: 'rxjava'
        exclude module: 'rxandroid'
        exclude module: 'support-annotations'
    }
    compile(libs.rxBindingAppCompat) {
        exclude module: 'appcompat-v7'
        exclude module: 'rxbinding'
    }

    // OkHttp + Retrofit
    compile libs.okHttp
    compile libs.okHttpLoggingInterceptor
    compile libs.retrofit
    compile libs.retrofitGsonConverter
    compile libs.retrofitRxJavaAdapter

    //GreenDAO
    compile libs.greenDao

    compile libs.timber
    compile libs.fabMenu

    // View
    compile libs.butterKnife
    apt proc.butterKnife

    // Auto
    apt proc.autoGson
    apt proc.autoValue
    provided proc.autoGson
    provided proc.autoValue

    apt proc.autoParcel

    apt proc.retrolambda

    //CircleImageView
    compile libs.circleImageView

    //ThreeTen
    compile libs.threetenabp

    //Glide
    compile libs.glide
    compile libs.glideTransformations

    //Swipe layout
    compile libs.swipeLayout

    //Percent layout
    compile libs.percent

    //Timber
    compile libs.timber

    //Once
    compile libs.once

    //OnActivityResult
    compile libs.onActivityResult
    apt proc.onActivityResult

    //PhotoView
    compile libs.photoView

    //Analytics
    compile libs.firebaseAnalytics

    //Debug tools
    // Stetho
    debugCompile libs.stetho

    // LeakCanary
    debugCompile libs.leakCanary

    // BlockCanary
    debugCompile libs.blockCanary

    // StrictMode
    debugCompile libs.strictmodeNotifier

    //Release tools
    //HockeyApp
    releaseCompile libs.hockeyApp

    // Unit testing
    testCompile(test.junit) {
        exclude module: 'hamcrest-core'
    }
    testCompile test.hamcrest
    testCompile test.mockito

    testCompile(test.threetenabp) {
        exclude group: 'com.jakewharton.threetenabp', module: 'threetenabp'
    }
}

if (!getGradle().getStartParameter().getTaskRequests()
        .toString().toLowerCase().contains("nointegrations")){
    apply plugin: 'com.google.gms.google-services'
}